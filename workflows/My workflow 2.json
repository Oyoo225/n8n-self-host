{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "746dd8e5-a4f8-4a94-8bdd-412d29143849",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -140,
        0
      ],
      "id": "de681596-a7c2-4019-9c7f-1e97650d8139",
      "name": "Webhook",
      "webhookId": "746dd8e5-a4f8-4a94-8bdd-412d29143849"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.prompt}} \nif (!prompt) {\n  prompt = \"User message is empty. Please provide a prompt.\";\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        700,
        -20
      ],
      "id": "6401324c-d56d-4e00-933f-f8795041cb4e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "647811a1-7272-4e6b-ae40-43ae627fd2d0",
              "name": "userMessage",
              "value": "={{ $json[\"body\"][\"message\"] }}",
              "type": "string"
            },
            {
              "id": "db44a246-a8a5-4950-965c-72dbccacbd01",
              "name": "intent",
              "value": "={{ $json[\"body\"][\"intent\"] }}\t",
              "type": "string"
            },
            {
              "id": "355f670c-9ac6-4a1d-93ae-d9cfce08f4f1",
              "name": "spread",
              "value": "={{ Number($json[\"body\"][\"spread\"]) }}\n",
              "type": "number"
            },
            {
              "id": "e9111264-8850-461f-acfc-2fd030d5cd27",
              "name": "cards",
              "value": "={{ $json[\"body\"][\"cards\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        160
      ],
      "id": "0873bb79-987d-41ba-ab9e-ca1e6e7e2cc7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Step 0: Full Major Arcana deck\nconst tarotCards = [\n  \"The Fool\", \"The Magician\", \"The High Priestess\", \"The Empress\", \"The Emperor\",\n  \"The Hierophant\", \"The Lovers\", \"The Chariot\", \"Strength\", \"The Hermit\",\n  \"Wheel of Fortune\", \"Justice\", \"The Hanged Man\", \"Death\", \"Temperance\",\n  \"The Devil\", \"The Tower\", \"The Star\", \"The Moon\", \"The Sun\",\n  \"Judgement\", \"The World\"\n];\n\n// Step 1: Grab message and spread\nconst rawMessage = $json.userMessage || \"\"; // <-- FIXED this line\nconst message = rawMessage.toLowerCase();\nconst spread = typeof $json.spread !== \"undefined\" ? Number($json.spread) : 3;\n\n// âœ… Step 2: Determine intent with proper logic priority\nlet intent = \"chat\";\n\nif (\n  message.includes(\"advice\") ||\n  message.includes(\"affirmation\") ||\n  message.includes(\"guidance\")\n) {\n  intent = \"advice\";\n} else if (\n  message.includes(\"card\") ||\n  message.includes(\"tarot\") ||\n  spread > 0\n) {\n  intent = \"tarot\";\n}\n\n// Step 3: Draw cards if intent is tarot\nlet cards = [];\nif (intent === \"tarot\" && spread > 0) {\n  const drawn = new Set();\n  while (drawn.size < spread) {\n    const randomCard = tarotCards[Math.floor(Math.random() * tarotCards.length)];\n    drawn.add(randomCard);\n  }\n  cards = Array.from(drawn);\n}\n\n// Step 4: Build Gemini prompt\nconst intro = `You are Selene, a mystical spiritual guide who replies with warmth, clarity, and insight. Respond only in plain text with no code formatting.`;\n\nlet prompt = intro;\n\nif (intent === \"tarot\" && cards.length > 0) {\n  prompt += `\\n\\nThe user has drawn ${cards.length} tarot card(s):\\n\\n`;\n  cards.forEach((card, i) => {\n    prompt += `Card ${i + 1} â€“ ${card}:\\n- Meaning:\\n- Guidance:\\n\\n`;\n  });\n} else if (intent === \"advice\") {\n  prompt += `\\n\\nThe user seeks spiritual advice or affirmation. Please offer one powerful mystical reflection.`;\n} else {\n  prompt += `\\n\\nThe user says:\\n\"${rawMessage}\"\\n\\nPlease respond in a natural, supportive, and magical tone.`;\n}\n\n// Step 5: Return to Gemini\nreturn [{\n  json: {\n    userMessage: rawMessage,\n    intent,\n    spread,\n    cards,\n    prompt\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        160
      ],
      "id": "d000da6f-be42-47d6-8082-442e7066a5dc",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const data = $json.output;\n\n// Check for card-based response\nif (data.cards && Array.isArray(data.cards) && data.cards.length > 0) {\n  const html = data.cards.map(card => {\n    return `**${card.title}**\\n${card.description}\\n_${card.guidance}_`;\n  }).join(\"\\n\\n\");\n\n  return [{\n    json: {\n      sender: \"Selene\",\n      reply: html,\n    }\n  }];\n}\n\n// Check for plain reply (from advice/chat intent)\nif (data.reply) {\n  return [{\n    json: {\n      sender: \"Selene\",\n      reply: data.reply\n    }\n  }];\n}\n\n// Fallback if nothing structured is returned\nif (typeof data === \"string\") {\n  return [{\n    json: {\n      sender: \"Selene\",\n      reply: data\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    sender: \"Selene\",\n    reply: \"ðŸ”® Something mystical went wrong. I couldn't interpret the stars.\",\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        -20
      ],
      "id": "8a1707aa-36a8-48e4-9d29-19eccc812e7d",
      "name": "Code1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.sender }}\n{{ $json.reply }}\n",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1280,
        -20
      ],
      "id": "3ae1a3f2-f843-4872-895b-51c8bee54446",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "tarot",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "aa64785c-f2f2-458f-b8f8-049a300442f7"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b58614b3-809c-402b-9276-e40c1f2e062e",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "advice",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7b94757a-8b6a-469a-9a37-010c97d8ef9d",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "chat",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        420,
        -20
      ],
      "id": "172965d7-627d-4e46-9e4d-31ab8f88cc13",
      "name": "Switch"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        700,
        200
      ],
      "id": "0a30b122-ddbb-4d98-87dd-53262b08b570",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "mRHB8QkdIVPQLN8w",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        980,
        220
      ],
      "id": "94040bdc-41fb-41dc-a0ed-4ed6a03e8229",
      "name": "Code Tool"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Code Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a3617307-8585-4193-841a-e9820ef3b738",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "95cbc89f22451d3d333370c1ffb969dcbfffc4a8122339878fa5191cb3b07cc7"
  },
  "id": "I0DIJSqot4xyppjn",
  "tags": []
}